server {
    listen 80 default;

    client_max_body_size 108M;

    access_log /var/log/nginx/application.access.log;

    root /application/public;
    index index.php;

    # try to serve file directly, fallback to index.php
    location / {
        try_files $uri /index.php$is_args$args;
    }

    #    if (!-e $request_filename) {
    #        rewrite ^.*$ /index.php last;
    #    }


    # le code ci dessous équivaut au code htacess :     RewriteEngin on => Signaler qu'on a besoin du programme de réécriture d'url
    #                                                   
    #                                                   RewriteCond %{REQUEST_FILENAME} !-f => Pour que la règle en dessous s'exécute, il faut que le fichier demandé (%{REQUEST_FILENAME}) 
    #                                                                                          n'existe pas (!-f).

    #                                                   RewriteRule ^(.*)$ index.php?url=$1 [QSA,L] => Demander de tout réécrire via une règle de réécriture : peu importe ce que tu trouve (.*) 
    #                                                                                                tu rediriges ($) vers index.php dont l'url est égale à ce qu'il a trouvé (url=$1). 
    #                                                                                                le flag (QSA) est la pour transphaser les variables GET et (",L") pour signaler que c'est la 
    #                                                                                                dernière url qu'on rencontre.
    
    if (!-e $request_filename){
        rewrite ^(.*)$ /index.php?url=$1 last;         #ATTENTION: le convertisseur propose "break" en fin de code, il faut le remplacer par "last".
    }

    location ~ \.php$ {
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PHP_VALUE "error_log=/var/log/nginx/application_php_errors.log";
        fastcgi_param PHP_VALUE "include_path=/application";
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        include fastcgi_params;
    }
}
